QUERY_FOR_CREATE_AUTH_TABLE : |
                              CREATE TABLE IF NOT EXISTS authentication
                              (user_id INTEGER PRIMARY KEY,
                              username VARCHAR(100) UNIQUE, 
                              password VARCHAR(400), 
                              role VARCHAR(10)) 

QUERY_FOR_CREATE_USERS_TABLE : |
                              CREATE TABLE IF NOT EXISTS users
                              (user_id INT PRIMARY KEY,
                              name VARCHAR(100),
                              email VARCHAR(100),
                              phone_number BIGINT,
                              gender VARCHAR(20),
                              FOREIGN KEY (user_id) REFERENCES authentication(user_id) ON DELETE CASCADE)

QUERY_FOR_CREATE_TASKS_TABLE : |
                              CREATE TABLE IF NOT EXISTS tasks
                              (task_id INT PRIMARY KEY,
                              user_id INT, 
                              task_name VARCHAR(100), 
                              task_desc VARCHAR(40),
                              date_created VARCHAR(50),
                              due_date VARCHAR(50),
                              is_completed INT DEFAULT 0,
                              category VARCHAR(100),
                              assigned_by VARCHAR(100)) 

QUERY_FOR_CREATE_ASSIGNED_TASKS_TABLE : |
                              CREATE TABLE IF NOT EXISTS assigned_tasks
                              (man_id INT,
                              user_id INT, 
                              task_id INT PRIMARY KEY, 
                              FOREIGN KEY (task_id) REFERENCES tasks(task_id) ON DELETE CASCADE) 

QUERY_TO_VERIFY_LOGIN : |
    SELECT * FROM authentication
    WHERE username=%s AND password= %s

QUERY_TO_ADD_IN_AUTH_TABLE : |
                            INSERT INTO authentication
                            (user_id,username,password,role) 
                            VALUES(%s,%s,%s,'user')

QUERY_TO_ADD_IN_USERS_TABLE : |
                            INSERT INTO users
                            (user_id,name,email,phone_number,gender) VALUES(%s,%s,%s,%s,%s)

QUERY_TO_VIEW_ALL_USERS : |
 SELECT a.user_id,a.username,u.name,u.email,u.phone_number,u.gender 
 FROM authentication AS a INNER JOIN users AS u
 ON A.user_id = u.user_id
 WHERE role = 'user'
 
QUERY_TO_VIEW_TASK_TABLE_USERS : |
 SELECT * FROM tasks

INSERT_INTO_TASKS_TABLE_BY_MANAGER : |
  INSERT INTO tasks (task_id, user_id, task_name, task_desc ,date_created ,due_date,is_completed ,category,assigned_by) VALUES (%s,%s,%s,%s,%s,%s,0,%s,%s)

INSERT_INTO_ASSIGNED_TASKS_TABLE : |
 INSERT INTO assigned_tasks (man_id, user_id, task_id) VALUES (%s,%s,%s)

VIEW_STATUS_OF_MY_ASSIGNED_TASKS : |
 SELECT a.user_id,a.task_id,t.is_completed,t.task_name,t.task_desc,t.date_created,t.due_date
 FROM assigned_tasks AS a INNER JOIN tasks AS t
 ON a.task_id = t.task_id
 WHERE t.assigned_by = %s

UPDATE_STATUS_OF_MY_ASSIGNED_TASKS : |
 UPDATE tasks
 SET is_completed=%s
 WHERE task_id =%s

QUERY_TO_FETCH_ALL_TASK_IDS : 
 SELECT task_id FROM tasks WHERE task_id = %s

Query_to_VIEW_ALL_ASSIGNED_TASKS : |
  SELECT assign.user_id,assign.task_id FROM assigned