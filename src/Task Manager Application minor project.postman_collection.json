{
	"info": {
		"_postman_id": "85913341-f80d-4623-8d18-249f1455477e",
		"name": "Task Manager Application minor project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32272112"
	},
	"item": [
		{
			"name": "Happy path",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Signup message\",function (){\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.haveOwnProperty('message')\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const myArray= [\"male\", \"female\"];\r",
											"pm.collectionVariables.set('gender', myArray[Math.floor(Math.random()*myArray.length)]);\r",
											"pm.collectionVariables.set('randomphonenumber',_.random(6000000000,9999999999));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"Sonal@5\",\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phone_number\":{{randomphonenumber}} ,\r\n    \"gender\": \"{{gender}}\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test(\"Login message\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('message');\r",
											"    pm.collectionVariables.set('access_token',response.access_token);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"diya10\",\r\n    \"password\": \"Diya@10\"\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "my-profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"var user_details_schema = {\r",
											"    'user_id': 'integer',\r",
											"    'username': 'string',\r",
											"    'name': 'string',\r",
											"    'email': 'string',\r",
											"    'phone_number': 'integer',\r",
											"    'gender': 'string'\r",
											"};\r",
											"\r",
											"var data = pm.response.json();\r",
											"\r",
											"pm.test('Valid User Schema', function() {\r",
											"    pm.expect(tv4.validate(data, user_details_schema)).to.be.true;\r",
											"    pm.collectionVariables.set('user_id',data.user_id);\r",
											"});\r",
											"\r",
											"pm.test('Content-Type header is application/json', function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/my-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"my-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "update my profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful profile update\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.haveOwnProperty('message')\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \"name\":\"diya jain\",\r\n    \"email\":\"diya10@gmail.com\",\r\n    \"phone_number\":9820372622}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/update-my-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"update-my-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "my tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var tasks_schema = \r",
											"                {\r",
											"                \"type\": \"array\",\r",
											"                \"items\": [\r",
											"                    {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"task_id\": {\r",
											"                        \"type\": \"integer\"\r",
											"                        },\r",
											"                        \"user_id\": {\r",
											"                        \"type\": \"integer\"\r",
											"                        },\r",
											"                        \"task_name\": {\r",
											"                        \"type\": \"string\"\r",
											"                        },\r",
											"                        \"task_desc\": {\r",
											"                        \"type\": \"string\"\r",
											"                        },\r",
											"                        \"date_created\": {\r",
											"                        \"type\": \"string\"\r",
											"                        },\r",
											"                        \"due_date\": {\r",
											"                        \"type\": \"string\"\r",
											"                        },\r",
											"                        \"is_completed\": {\r",
											"                        \"type\": \"integer\"\r",
											"                        },\r",
											"                        \"category\": {\r",
											"                        \"type\": \"string\"\r",
											"                        },\r",
											"                        \"assigned_by\": {\r",
											"                        \"type\": \"string\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\": [\r",
											"                        \"task_id\",\r",
											"                        \"user_id\",\r",
											"                        \"task_name\",\r",
											"                        \"task_desc\",\r",
											"                        \"date_created\",\r",
											"                        \"due_date\",\r",
											"                        \"is_completed\",\r",
											"                        \"category\",\r",
											"                        \"assigned_by\"\r",
											"                    ]\r",
											"                    },\r",
											"                    {\r",
											"                    \"type\": \"object\",\r",
											"                    \"properties\": {\r",
											"                        \"task_id\": {\r",
											"                        \"type\": \"integer\"\r",
											"                        },\r",
											"                        \"user_id\": {\r",
											"                        \"type\": \"integer\"\r",
											"                        },\r",
											"                        \"task_name\": {\r",
											"                        \"type\": \"string\"\r",
											"                        },\r",
											"                        \"task_desc\": {\r",
											"                        \"type\": \"string\"\r",
											"                        },\r",
											"                        \"date_created\": {\r",
											"                        \"type\": \"string\"\r",
											"                        },\r",
											"                        \"due_date\": {\r",
											"                        \"type\": \"string\"\r",
											"                        },\r",
											"                        \"is_completed\": {\r",
											"                        \"type\": \"integer\"\r",
											"                        },\r",
											"                        \"category\": {\r",
											"                        \"type\": \"string\"\r",
											"                        },\r",
											"                        \"assigned_by\": {\r",
											"                        \"type\": \"string\"\r",
											"                        }\r",
											"                    },\r",
											"                    \"required\": [\r",
											"                        \"task_id\",\r",
											"                        \"user_id\",\r",
											"                        \"task_name\",\r",
											"                        \"task_desc\",\r",
											"                        \"date_created\",\r",
											"                        \"due_date\",\r",
											"                        \"is_completed\",\r",
											"                        \"category\",\r",
											"                        \"assigned_by\"\r",
											"                    ]\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"\r",
											"pm.test(\"Response schema is correct\",()=>{\r",
											"    pm.response.to.have.jsonSchema (tasks_schema);\r",
											"});\r",
											"\r",
											"\r",
											"// pm.test(\"Response array should not be empty and must contain at least one task\", function () {\r",
											"//     const responseData = pm.response.json();\r",
											"    \r",
											"//     pm.expect(responseData).to.be.an('array');\r",
											"//     responseData.forEach(function(task) {\r",
											"//         pm.expect(task).to.be.an('object');\r",
											"//     });\r",
											"// });\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/mytasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"mytasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "tasks",
					"item": [
						{
							"name": "create tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.haveOwnProperty('message')\r",
											"    pm.collectionVariables.set('user_task_id',response.task_id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"task_name\":\"{{$randomWord}}\",\r\n    \"task_desc\":\"{{$randomWord}}\",\r\n    \"due_date\":\"2025-02-21\",\r\n    \"category\":\"Today\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/create-tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"create-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "assign tasks",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get('baseUrl')+'/v1/login',\r",
											"    method: 'POST',\r",
											"    header:{\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: JSON.stringify({\"username\":\"chetna6\",\"password\":\"Chetna@6\"})\r",
											"}, function (err, res) {\r",
											"    if(err){\r",
											"        console.log(err)\r",
											"    }\r",
											"    pm.collectionVariables.set(\"access_token\", res.json().access_token);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"assigned task successfully\", function () {\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response).to.haveOwnProperty('message')\r",
											"    pm.collectionVariables.set('assigned_task_id',response.task_id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user_id\": {{user_id}},\r\n    \"task_name\": \"{{$randomWord}}\",\r\n    \"task_desc\": \"{{$randomWord}}\",\r\n    \"due_date\": \"2025-02-24\",\r\n    \"category\": \"Important\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/assign-tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"assign-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "update task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  pm.expect(responseData).to.not.be.empty;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"task_id\": {{assigned_task_id}},\r\n    \"task_name\": \"Learn\",\r\n    \"task_desc\" : \"Complete\",\r\n    \"due_date\" : \"2025-02-22\",\r\n    \"is_completed\" :1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/update-tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"update-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message field is present in the response\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.message).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message field is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/delete-tasks/:task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"delete-tasks",
										":task_id"
									],
									"variable": [
										{
											"key": "task_id",
											"value": "{{assigned_task_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "manager",
					"item": [
						{
							"name": "getallusers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(user => {\r",
											"        pm.expect(user).to.include.all.keys('user_id', 'username', 'name', 'email', 'phone_number', 'gender');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Valid Response schema\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "task-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each task object contains the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(task) {\r",
											"        pm.expect(task).to.include.all.keys('user_id', 'task_id', 'is_completed', 'task_name', 'task_desc', 'date_created', 'due_date');\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/assigned-task-status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"assigned-task-status"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get('baseUrl')+'/v1/login',",
									"    method: 'POST',",
									"    header:{",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: JSON.stringify({\"username\":\"chetna6\",\"password\":\"Chetna@6\"})",
									"}, function (err, res) {",
									"    if(err){",
									"        console.log(err)",
									"    }",
									"    pm.collectionVariables.set(\"access_token\", res.json().access_token);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - status_code and message\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('status_code');\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Message is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Login message\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.have.property('message');\r",
									"    pm.collectionVariables.set('access_token',response.access_token);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"diya10\",\r\n    \"password\": \"Diya@10\"\r\n\r\n}\r\n\r\n// {\r\n//     \"username\": \"chetna6\",\r\n//     \"password\": \"Chetna@6\"\r\n// }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Invalid token/Auth header missing",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "my-profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test('Content-Type header is application/json', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"",
											"pm.test(\"Response body includes a meaningful error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.msg).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.msg).to.not.be.empty;",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/my-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"my-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "update profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Content-Type header is application/json', function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body includes a meaningful error message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.msg).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.msg).to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \"name\":\"diya jain\",\r\n    \"email\":\"diya10@gmail.com\",\r\n    \"phone_number\":9820372622}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/update-my-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"update-my-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "my tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Content-Type header is application/json', function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body includes a meaningful error message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.msg).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.msg).to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/mytasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"mytasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "tasks",
					"item": [
						{
							"name": "create tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Content-Type header is application/json', function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body includes a meaningful error message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.msg).to.exist.and.to.be.a('string');\r",
											"    pm.expect(responseData.msg).to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"task_name\":\"{{$randomWord}}\",\r\n    \"task_desc\":\"{{$randomWord}}\",\r\n    \"due_date\":\"2025-02-21\",\r\n    \"category\":\"Today\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/create-tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"create-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "assign tasks",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// pm.sendRequest({\r",
											"//     url: pm.collectionVariables.get('baseUrl')+'/v1/login',\r",
											"//     method: 'POST',\r",
											"//     header:{\r",
											"//         'Content-Type': 'application/json'\r",
											"//     },\r",
											"//     body: JSON.stringify({\"username\":\"chetna6\",\"password\":\"Chetna@6\"})\r",
											"// }, function (err, res) {\r",
											"//     if(err){\r",
											"//         console.log(err)\r",
											"//     }\r",
											"//     pm.collectionVariables.set(\"access_token\", res.json().access_token);\r",
											"// });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has message property\", function () {\r",
											"  pm.expect(pm.response.json()).to.have.property('msg');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user_id\": 3542,\r\n    \"task_name\": \"{{$randomWord}}\",\r\n    \"task_desc\": \"{{$randomWord}}\",\r\n    \"due_date\": \"2025-02-24\",\r\n    \"category\": \"Important\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/assign-tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"assign-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "update task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Fixed syntax \r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required Content-Type header set to 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData.msg).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  pm.expect(responseData).to.not.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"task_id\": 4532,\r\n    \"task_name\": \"Learn\",\r\n    \"task_desc\" : \"Complete\",\r\n    \"due_date\" : \"2025-02-22\",\r\n    \"is_completed\" :1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/update-tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"update-tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Message field is present in the response\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.msg).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Message field is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.msg).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/delete-tasks/:task_id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"delete-tasks",
										":task_id"
									],
									"variable": [
										{
											"key": "task_id",
											"value": "3522"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "manager",
					"item": [
						{
							"name": "getallusers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(user => {\r",
											"        pm.expect(user).to.include.all.keys('user_id', 'username', 'name', 'email', 'phone_number', 'gender');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify content type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Valid Response schema\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "task-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Each task object contains the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    responseData.forEach(function(task) {\r",
											"        pm.expect(task).to.include.all.keys('user_id', 'task_id', 'is_completed', 'task_name', 'task_desc', 'date_created', 'due_date');\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/assigned-task-status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"assigned-task-status"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get('baseUrl')+'/v1/login',",
									"    method: 'POST',",
									"    header:{",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: JSON.stringify({\"username\":\"chetna6\",\"password\":\"Chetna@6\"})",
									"}, function (err, res) {",
									"    if(err){",
									"        console.log(err)",
									"    }",
									"    pm.collectionVariables.set(\"access_token\", res.json().access_token);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Not Authorised",
			"item": [
				{
					"name": "manager",
					"item": [
						{
							"name": "getallusers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Response status code is 403\", function () {",
											"    pm.expect(pm.response.code).to.equal(403);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response contains the required fields - code and status\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.code).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Code is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.code).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.code).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "task-status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {\r",
											"  pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is an object with code and status properties\", function () {\r",
											"  pm.expect(pm.response.json()).to.be.an('object').that.has.property('code');\r",
											"  pm.expect(pm.response.json()).to.be.an('object').that.has.property('status');\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required Content-Type header set to application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body is an object with expected properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('code');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/assigned-task-status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"assigned-task-status"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get('baseUrl')+'/v1/login',",
									"    method: 'POST',",
									"    header:{",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: JSON.stringify({\"username\":\"diya10\",\"password\":\"Diya@10\"})",
									"}, function (err, res) {",
									"    if(err){",
									"        console.log(err)",
									"    }",
									"    pm.collectionVariables.set(\"access_token\", res.json().access_token);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "my-profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 403\", function () {",
											"  pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response body has code and status properties\", function () {",
											"  pm.expect(pm.response.json()).to.have.property('code');",
											"  pm.expect(pm.response.json()).to.have.property('status');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/my-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"my-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "update my profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed status code test\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful profile update\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.haveOwnProperty('code');\r",
											"    pm.expect(response).to.haveOwnProperty('status');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{   \"name\":\"diya jain\",\r\n    \"email\":\"diya10@gmail.com\",\r\n    \"phone_number\":9820372622}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/v1/update-my-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"update-my-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "my tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response includes a code field\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  pm.expect(responseData).to.have.property('code');\r",
											"  pm.expect(responseData).to.have.property('status');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/mytasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"mytasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields - status_code and message\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('status_code');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Message is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/v1/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"v1",
										"logout"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.collectionVariables.get('baseUrl')+'/v1/login',",
									"    method: 'POST',",
									"    header:{",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: JSON.stringify({\"username\":\"chetna6\",\"password\":\"Chetna@6\"})",
									"}, function (err, res) {",
									"    if(err){",
									"        console.log(err)",
									"    }",
									"    pm.collectionVariables.set(\"access_token\", res.json().access_token);",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "status check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://task-manager-application-u1dm.onrender.com"
		},
		{
			"key": "gender",
			"value": "female"
		},
		{
			"key": "randomphonenumber",
			"value": 8414282229
		},
		{
			"key": "user_id",
			"value": 4357
		},
		{
			"key": "access_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6dHJ1ZSwiaWF0IjoxNzA4NDI5ODYyLCJqdGkiOiIwMmExNjY4Zi1hZTIzLTRlMmYtOTg5Ny1hODViZGQwMzY3ODciLCJ0eXBlIjoiYWNjZXNzIiwic3ViIjo2OTI5LCJuYmYiOjE3MDg0Mjk4NjIsImNzcmYiOiJlMTk5NzQyYi03ODk2LTQxZjYtOTkwYy0zOGViZWRkNjM4NzAiLCJleHAiOjE3MDg0MzA3NjIsInJvbGUiOiJtYW5hZ2VyIn0.pTqlEmD6vO6j21oFw_tNQwuNpFdV1Z_sFQnHzxSLCiU"
		},
		{
			"key": "user_task_id",
			"value": 4429
		},
		{
			"key": "assigned_task_id",
			"value": 9623
		}
	]
}